name: Full CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  workflow_call:
    inputs:
      run_only_terraform:
        required: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: fraud-detection
  IMAGE_TAG: latest

jobs:

  build-and-push-image:
    name: Build Docker Image & Push to ECR
    runs-on: ubuntu-latest
    if: ${{ inputs.run_only_terraform != true }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR Repository (if not exists)
        id: create_ecr
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names $PROJECT_NAME --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text 2>/dev/null || true)
          if [ -z "$ECR_URI" ]; then
            aws ecr create-repository --repository-name $PROJECT_NAME --region $AWS_REGION
            ECR_URI=$(aws ecr describe-repositories --repository-names $PROJECT_NAME --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          fi
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Package model.pkl into model.tar.gz
        run: |
          cd model/
          rm -f model.tar.gz
          tar --exclude='*.DS_Store' -czf model.tar.gz model.pkl

      - name: Build Docker Image
        run: |
          docker build -t $PROJECT_NAME:$IMAGE_TAG .

      - name: Tag & Push Image to ECR
        run: |
          docker tag $PROJECT_NAME:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG

  terraform-deploy:
    name: Deploy Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    if: always()  # Always run even if image build is skipped
    defaults:
      run:
        working-directory: infra/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate terraform.tfvars
        run: |
          cat <<EOF > terraform.tfvars
          project_name  = "fraud-detection"
          environment   = "prod"
          endpoint_name = "fraud-detection-endpoint"
          model_name    = "fraud-detection-model"
          instance_type = "ml.t2.medium"
          min_instances = 1
          max_instances = 2
          alert_email   = "atandafatimat01@gmail.com"
          EOF

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Validate
        run: terraform validate
        
      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply --auto-approve

  post-deploy-test:
    name: Health Check After Deployment
    runs-on: ubuntu-latest
    needs: terraform-deploy

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Wait for Endpoint Stabilization
        run: sleep 90

      - name: Export SageMaker Endpoint URL
        id: export_endpoint
        working-directory: infra/terraform
        run: |
          ENDPOINT_URL=$(terraform output -raw endpoint_url)
          echo "SAGEMAKER_ENDPOINT_URL=$ENDPOINT_URL" >> $GITHUB_ENV

      - name: Ping /ping endpoint
        run: |
          curl -f http://${{ env.SAGEMAKER_ENDPOINT_URL }}/ping

      - name: Run Inference Test
        run: |
          curl -X POST http://${{ env.SAGEMAKER_ENDPOINT_URL }}/invocations \
          -H "Content-Type: application/json" \
          -d '{"months_as_customer":5,"age":35,"policy_deductable":500,"umbrella_limit":0,"insured_sex":1,"insured_education_level":2,"insured_occupation":3,"insured_hobbies":0,"insured_relationship":0,"incident_type":1,"collision_type":1,"incident_severity":2,"authorities_contacted":0,"number_of_vehicles_involved":1,"property_damage":0,"bodily_injuries":0,"witnesses":1,"police_report_available":1,"total_claim_amount":10000,"injury_claim":1000,"property_claim":2000,"vehicle_claim":3000,"auto_make":1,"auto_year":2018,"incident_hour_bin":3,"claim_ratio":0.33}'

  destroy:
    name: Destroy Terraform Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: post-deploy-test
    defaults:
      run:
        working-directory: infra/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Destroy
        run: terraform destroy --auto-approve